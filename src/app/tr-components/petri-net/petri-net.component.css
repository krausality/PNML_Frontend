.import-hint {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    text-align: center;

    opacity: 0.5;
    z-index: 0;
    pointer-events: none;
}

.import-hint p {
    max-width: 800px;
    margin-left: 2rem;
    margin-right: 2rem;
}

.canvas {
    width: 100%;
    height: 70vh;
    border-style: dotted;
    border-color: lightgrey;
    transition: background-color 1s;
    user-select: none;
    box-sizing: border-box; /* make border be part of the 100% width */
    position: relative; /* Needed for absolute positioning of child controls */
    background-color: white; /* Ensure background for SVG */
}

/* Zoom Controls Styling */
.zoom-controls {
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 10; /* Ensure controls are above SVG content */
    background-color: rgba(255, 255, 255, 0.8); /* Semi-transparent background */
    border-radius: 4px;
    display: flex;
    flex-direction: column;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2); /* Optional shadow */
}

.zoom-controls button {
    min-width: 40px; /* Ensure buttons have a decent size */
    min-height: 40px;
    padding: 0;
    line-height: 40px;
}

.zoom-controls button:disabled mat-icon {
    opacity: 0.5; /* Visually indicate disabled state */
    cursor: default;
}
/* End Zoom Controls Styling */

.place {
    fill: white;
    stroke: black;
    stroke-width: 2;
}

.transition {
    fill: white;
    stroke: black;
    stroke-width: 2;
}

.transition.silent {
    fill: black;
}

.arc {
    fill: none;
    stroke: black;
    stroke-width: 2;
}

.background-arc {
    fill: none;
    stroke: transparent;
    opacity: 0;
    stroke-width: 10 !important;
}

.place-id {
    fill: black;
}

.token-label {
    fill: black;
}

.tansition-id {
    fill: grey;
}

.arc-weight {
    fill: black;
}

.arc-weight-background {
    fill: white;
    transition: fill 1s;
}

/**** PLAY MODE  ****/
/*
 * Adjusted styles for play mode
 * these take effect once the drawing area svg
 * has the play-mode class
 */
.canvas.play-mode {
    background-color: #c0bfbc;
}

.play-mode .arc-weight-background {
    fill: #c0bfbc;
}
.play-mode .transition.active {
    cursor: pointer;
    fill: green;
}

.play-mode .transition.active:hover {
    filter: drop-shadow(0 0 3px rgba(0, 0, 0, 1));
}

.play-mode .transition.active:active {
    fill: lightgreen;
    filter: drop-shadow(0 0 3px rgba(255, 255, 255, 1));
    filter: drop-shadow(0 0 5px rgba(255, 255, 255, 1));
}

/*
 * Text nodes that follow transitions (here: rects within svg) should not have
 * different cursors in play mode.
 * All interaction events should be caught in the wrapper group element.
 */
.play-mode .transition.active ~ text {
    cursor: pointer;
}

/* Styles for 'move' and 'anchor' mode */
.canvas.move-mode:hover {
    cursor: pointer;
}

.canvas.move-mode.dragging {
    cursor: grabbing;
}

.anchor {
    fill: black;
    stroke: black;
    stroke-width: 0px;
}

.line-segment {
    stroke: transparent;
    stroke-width: 10;
}

.editable {
    filter: drop-shadow(0 0 3px rgba(255, 0, 0, 1));
}

.editable:active,
.anchor.active,
.canvas.move-mode.dragging .place,
.canvas.move-mode.dragging .transition,
.canvas.move-mode.dragging .arc,
.canvas.move-mode.dragging .anchor {
    stroke: red;
    stroke-width: 2;
}

.move-mode .editable:active {
    cursor: grabbing;
}

.no-pointer-events {
    pointer-events: none;
}

.background-arc.editable:hover,
.analyze-mode .pointer {
    cursor: pointer;
}

/*
 * Add hover effect
 * In general elements should show the "hover"-Style only when they are
 * currently being editable and the user is doing a mouseover/hover on
 * the element:
 * - Elements with class ".editable" oder ".line-segment" that are currently
 *   being hovered
 * - Elements with class ".anchor" that also have the ".active" class set
 * - Elements with class ".arc" AND ".editable", that are direct children of
 *   the ".arc-group"-Element currently being hovered. This is needed to be
 *   able to highlight the main arcs when line-segments are hovered, as those
 *   cannot get a drop shadow since they have no stroke color.
 */
.editable:hover,
.line-segment:hover,
.anchor.active,
.arc-group:hover > .arc.editable {
    cursor: pointer;
    /* stronger drop shadow to visible highlight the hovered element */
    filter: drop-shadow(0 0 2px rgba(255, 0, 0, 1))
        drop-shadow(0 0 3px rgba(255, 0, 0, 1));
}

.tab-transitioning .transition {
    transition: fill 1s;
}

text.label {
    text-anchor: middle;
    dominant-baseline: central;
    font-size: 15px;
}

/* Styles for Analyze-mode*/
.analyze-mode .place-invariant {
    fill: lightblue;
}

.analyze-mode text.place-invariant {
    font-weight: bold;
    fill: rgb(133, 186, 204);
}

/* Simulation animation styles */
.sim-enabled-transition {
    fill: lightblue !important; /* Or any other suitable color */
}

.sim-fired-transition {
    fill: lightcoral !important; /* Or any other suitable color */
}

/* Optional: if you want a general highlight for the current step,
   /* Animation styles for simulation playback */
.animation-enabled {
    fill: orange !important;
    filter: drop-shadow(0 0 5px rgba(255, 165, 0, 0.8)) !important;
    transition: fill 0.3s ease-in-out, filter 0.3s ease-in-out;
}

.animation-fired {
    fill: lightgreen !important;
    filter: drop-shadow(0 0 5px rgba(144, 238, 144, 0.8)) !important;
    transition: fill 0.3s ease-in-out, filter 0.3s ease-in-out;
}

/* Wenn die Frequenzanalyse aktiv ist, ändere den Cursor und füge einen Hover-Effekt hinzu */
.frequency-analysis-active .transition-group {
    cursor: pointer;
    transition: filter 0.2s ease-in-out;
}

.frequency-analysis-active .transition-group:hover {
    filter: drop-shadow(0px 0px 3px rgba(0, 110, 255, 0.7));
}
